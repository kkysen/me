{"version":3,"sources":["media/logo.svg","ts/main/polyfill/Array.prototype.flatMap.ts","ts/main/polyfill/Object.fromEntries.ts","ts/util/variableNames.ts","ts/main/app/me.ts","ts/main/app/Title.tsx","ts/main/internship/SimpleInternship.tsx","ts/main/internship/DietrichLab.tsx","ts/main/internship/FruitFlyBrainObservatory.tsx","ts/main/internship/SmartNeuralFuzzer.tsx","ts/main/project/ProjectHeader.tsx","ts/main/project/projectsData.ts","ts/main/project/ProjectData.ts","ts/main/writing/writings.ts","ts/main/writing/WritingPaths.ts","ts/main/page/pages.tsx","ts/main/page/Home.tsx","ts/main/page/Internships.tsx","ts/main/page/Projects.tsx","ts/main/page/Writings.tsx","ts/main/page/Baseball.tsx","ts/main/page/Resume.tsx","ts/main/app/Footer.tsx","ts/main/app/NavBar.tsx","ts/main/app/Header.tsx","ts/main/app/Routes.tsx","ts/util/serviceWorker.ts","index.tsx","ts/main/app/App.tsx"],"names":["module","exports","__webpack_require__","p","Array","prototype","flatMap","thisArg","_ref","bind","concat","apply","Object","toConsumableArray","this","map","fromEntries","entries","o","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","k","v","err","return","separateCamelCase","className","replace","trim","me","Title","title","children","react","react_document_title_default","a","simpleInternship","props","name","_props$prettyName","prettyName","time","url","img","AbstractAndRole","path","main","react_default","createElement","Title_Title","src","Preview","Fragment","thumb","react_router_dom","to","href","abstract","website","Main","pages","defineProperty","DietrichLab","FruitFlyBrainObservatory","SmartNeuralFuzzer","ProjectHeader","data","brief","json","projectsData","projectsJson","gitHubUser","repos","_ref4","repoName","project","_json$camelCase","camelCase","file","s","parseProject","WritingImpl","docId","date","classCallCheck","make","root","parentDir","dir","metadata","html","public","dist","process","getWritingPaths","writings","writingsMetadata","_ref2$override","override","Date","mainPages","Home","Internships","SmartNeuralFuzzer_SmartNeuralFuzzer","Projects","values","ProjectHeader_ProjectHeader","key","Writing","toLocaleDateString","Baseball","Resume","subPages","objectSpread","sub","all","Footer","NavBar","keys","Header","NavBar_NavBar","Routes","Page","react_router","exact","component","location","window","serviceWorker","NODE_ENV","PUBLIC_URL","navigator","hostname","match","unRegister","_unRegister","arguments","_callee3","_registration2","regenerator_default","wrap","_context3","prev","ready","registration","sent","unregister","stop","ReactDOM","Header_Header","Routes_Routes","Footer_Footer","document","getElementById","asyncToGenerator","mark","_callee","_context"],"mappings":"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","file":"static/js/main.1254c8be.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function flatMap<T, U, This = undefined>(\n    this: T[],\n    flatMap: (this: This, value: T, index: number, array: T[]) => U | readonly U[],\n    thisArg?: This\n): U[] {\n    if (thisArg) {\n        flatMap = flatMap.bind(thisArg as ThisParameterType<typeof flatMap>);\n    }\n    // TODO speed up, remove unnecessary copies w/ manual for...of loop\n    return ([] as U[]).concat(...this.map(flatMap));\n}\n\nif (!Array.prototype.flatMap) {\n    Array.prototype.flatMap = flatMap;\n}\n","export function fromEntries<T = any>(entries: Iterable<readonly [PropertyKey, T]>): { [k in PropertyKey]: T } {\n    const o: { [k in PropertyKey]: T } = {};\n    for (const [k, v] of entries) {\n        // for some reason symbols aren't allowed as an indexable property\n        // even though they're part of PropertyKey\n        o[k as string | number] = v;\n    }\n    return o;\n}\n\nif (!Object.fromEntries) {\n    Object.fromEntries = fromEntries;\n}\n","export function separateCamelCase(className: string): string {\n    return className.replace(/([A-Z])/g, \" $1\").trim();\n}\n","export const me = {\n    name: \"Khyber Sen\",\n    email: \"kkysen@gmail.com\",\n} as const;\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport DocumentTitle from \"react-document-title\";\nimport {me} from \"./me\";\n\nexport const Title: FC<{title?: string}> = ({title, children}) => {\n    return <DocumentTitle title={title ? `${title} - ${me.name}` : me.name}>\n        <>\n            {children}\n        </>\n    </DocumentTitle>;\n};\n","import {default as React, FC} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {separateCamelCase} from \"../../util/variableNames\";\nimport {Title} from \"../app/Title\";\nimport {Pages} from \"../page/pages\";\n\ninterface SimpleInternship {\n    readonly Preview: FC;\n    readonly Main: FC;\n    readonly pages: Pages;\n}\n\ninterface Props {\n    name: string;\n    prettyName?: string;\n    time: string;\n    url: {\n        abstract: string;\n        website: string;\n    };\n    img: {\n        thumb: string;\n        main: string;\n    }\n    AbstractAndRole: FC;\n}\n\nexport function simpleInternship(props: Props): SimpleInternship {\n    const {\n        name,\n        prettyName = separateCamelCase(name),\n        time,\n        url,\n        img,\n        AbstractAndRole,\n    } = props;\n    \n    const path = `Internships/${name}`;\n    \n    const preview: FC = () => {\n        return <>\n            {prettyName} - {time}\n            <img src={img.thumb}/>\n            <br/>\n            <Link to={`/${path}`}>Click here for my abstract and role on the project.</Link>\n            <br/>\n            <a href={url.abstract}>Click here for project abstract.</a>\n            <br/>\n            <a href={url.website}>Click here for project website.</a>\n        </>;\n    };\n    \n    const main: FC = () => {\n        return <Title title={prettyName}>\n            <img src={img.main}/>\n            Abstract and Role\n            <br/>\n            <p>\n                <AbstractAndRole/>\n            </p>\n        </Title>;\n    };\n    \n    return {\n        Preview: preview,\n        Main: main,\n        pages: {\n            [path]: main,\n        },\n    };\n}\n","import * as React from \"react\";\nimport {simpleInternship} from \"./SimpleInternship\";\n\nexport const DietrichLab = simpleInternship({\n    name: \"DietrichLab\",\n    time: \"Summer 2015\",\n    url: {\n        abstract: \"http://www.dietrichlab.com/multicellularity.html\",\n        website: \"http://www.dietrichlab.com\",\n    },\n    img: {\n        thumb: \"\", // TODO\n        main: \"\", // TODO\n    },\n    AbstractAndRole: () => <>\n        As an intern at Professor Dietrich’s Columbia lab in 2015, I studied the response of biofilms,\n        multicellular colonies of bacteria, to oxygen deprivation.\n        Because biofilms are much harder to kill and occasionally antibiotic resistant,\n        Understanding their weaknesses is crucial to developing new antibacterial treatments.\n        Since some infectious bacteria wrinkle to increase their oxygen exposure,\n        I worked on developing the optimal substrate mix to grow robust, wrinkled colonies\n        and then analyzing their chemical composition to understand the wrinkling response.\n        I also ran many polymerase chain reactions to discover the metabolic\n        and genetic pathways leading to this wrinkling adaptation.\n    </>,\n});\n","import * as React from \"react\";\nimport {simpleInternship} from \"./SimpleInternship\";\n\nexport const FruitFlyBrainObservatory = simpleInternship({\n    name: \"FruitFlyBrainObservatory\",\n    prettyName: \"FFBO - Fruit Fly Brain Observatory\",\n    time: \"Summer 2017\",\n    url: {\n        abstract: \"https://federalreporter.nih.gov/Projects/Details/?projectId=801626\",\n        website: \"http://fruitflybrain.org\",\n    },\n    img: {\n        thumb: \"\", // TODO\n        main: \"\", // TODO\n    },\n    AbstractAndRole: () => <>\n        To create better artificial intelligence, the best resource we have is our own brain.\n        By understanding how our own brain functions and what makes it so intelligent,\n        we may be able to apply these techniques to the AIs we create.\n        However, the human brain is amazingly complex with over 100 billion neurons,\n        and currently, we understand very little of how it works.\n        Thus, it is extremely useful to begin by studying the fruit fly brain,\n        a much smaller, simpler brain of only 100,000 neurons\n        that is still capable of advanced cognition beyond what we currently understand.\n        In creating simulations of the fruit fly brain and its many neural circuits,\n        it is vitally important to run real-time simulations that capture real-world\n        and analyze it as a fly would.\n        This allows us to evaluate how our model performs in the same situation as a real fruit fly.\n        The perfect candidate for this is a fruit fly robot that can sense and behave like a real fruit fly.\n        While simulating the physical capabilities of the fruit fly is also important,\n        simulating the sensory input and behavior is paramount, and is focused on in this project.\n        <br/>\n        My role in this project was to implement the vision system of the fruit fly robot.\n        To do so, I had to simulate the grid-like, blurred vision of the fruit fly’s compound eyes,\n        which was accomplished by using a convolution of the image frame with a gaussian kernel,\n        in addition to simulating the same elementary motion detection algorithms\n        that have been recently discovered in the fruit fly brain.\n        The entire vision system was not implemented,\n        but since motion detection and the fly’s evasive response is\n        one of the fruit fly’s most used neural pathways, this was deemed sufficient for most purposes.\n        Both the convolution and motion detection algorithms are highly parallelizable,\n        as are the actual neural pathways in the brain,\n        so full advantage was taken of the massive parallel processing power of the GPU,\n        specifically the embeddable NVIDIA Jetson TX2.\n        A major challenge in this was the real-time demand,\n        since the camera ran at 60 frames per second (ideally, this would be set at 300 FPS,\n        because the fruit fly’s compound eye can see at a much higher rate,\n        but the camera used could not attain 300 FPS),\n        meaning all the image processing, convolution, and motion detection\n        had to be performed in 1/60th of a second.\n        Consequently, the program had to be heavily optimized for the GPU,\n        performing copy elision so that the raw image was sent directly to the GPU\n        and ensuring the parallel algorithms achieved maximum cache efficiency and shared memory use,\n        most loops were unrolled to reduce instruction overhead,\n        and striding all memory accesses to reduce shared memory bank conflicts.\n        <br/>\n        After 3 weeks of learning Cuda GPU programming using C, C++, and Python\n        and the neural “architecture” of the fruit fly brain,\n        and after 4 weeks working on this project, the vision system of the fruit fly robot was complete.\n        It is now able to process video at 60 frames per second and detect elementary motion\n        after going through the compound vision filter and then make the appropriate response.\n        It is able to track and follow a moving object,\n        as well as speed away when an object approaches too quickly,\n        and thus is able to mimic the behavior of the fruit fly.\n    </>,\n});\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const SmartNeuralFuzzer: FC = () => {\n    return <>\n        Smart Neural Fuzzer\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectData} from \"./ProjectData\";\n\nexport const ProjectHeader: FC<{data: ProjectData}> = ({data}) => {\n    const {name, brief, url} = data;\n    return <div>\n        Name: {name}\n        <br/>\n        {brief}\n        <br/>\n        See source code: <a href={url}>{url}</a>\n        <br/>\n    </div>;\n};\n","import projectsJson from \"../../../data/projects/projects.json\";\nimport {parseProjects} from \"./ProjectData\";\n\nexport const projectsData = parseProjects(projectsJson);\n","import {separateCamelCase} from \"../../util/variableNames\";\n\ninterface ProjectJson {\n    readonly brief: string;\n    readonly name?: string;\n    readonly camelCase?: boolean;\n    readonly file?: string;\n}\n\ninterface ProjectsJson {\n    readonly [gitHubUser: string]: {\n        readonly [repoName: string]: ProjectJson;\n    };\n}\n\nexport interface ProjectData {\n    readonly name: string;\n    readonly gitHubUser: string;\n    readonly repoName: string;\n    readonly url: string;\n    readonly brief: string;\n}\n\nfunction parseProject(gitHubUser: string, repoName: string, json: ProjectJson): ProjectData {\n    const {brief, name, camelCase = true, file} = json;\n    return {\n        name: name || (camelCase ? separateCamelCase : (s: string) => s)(repoName),\n        gitHubUser,\n        repoName,\n        url: `https://github.com/${gitHubUser}/${repoName}${file || \"\"}`,\n        brief,\n    };\n}\n\nexport function parseProjects(json: ProjectsJson): {[repoName: string]: ProjectData} {\n    return Object.fromEntries(\n        Object.entries(json)\n            .flatMap(([gitHubUser, repos]) => Object.entries(repos)\n                .map(([repoName, project]) => parseProject(gitHubUser, repoName, project))\n            )\n            .map(project => [project.repoName, project])\n    );\n}\n","import writingsMetadata from \"../../../data/writings/metadata.json\";\nimport {JsonWritingMetadata, JsonWritingMetadataOverride, WritingData, WritingMetadata} from \"./WritingData\";\nimport {getWritingPaths} from \"./WritingPaths\";\n\nclass WritingImpl implements WritingData {\n    \n    readonly docId: string;\n    readonly title: string;\n    readonly date: Date;\n    \n    constructor({docId, title, date}: WritingMetadata) {\n        this.docId = docId;\n        this.title = title;\n        this.date = date;\n    }\n    \n    get url() {\n        return getWritingPaths(this.docId).dist.html;\n    }\n    \n}\n\ninterface OverrideableJsonWritingMetadata extends JsonWritingMetadata {\n    override?: JsonWritingMetadataOverride;\n}\n\nexport function writingFromJson({docId, title, date, override = {}}: OverrideableJsonWritingMetadata): WritingData {\n    return new WritingImpl({\n        docId,\n        title: override.title || title,\n        date: new Date(override.date || date),\n    });\n}\n\nexport const writings: readonly WritingData[] = writingsMetadata.map(writingFromJson);\n","interface WritingPaths {\n    readonly parentDir: string;\n    readonly dir: string;\n    readonly metadata: string;\n    readonly html: string;\n}\n\ninterface AllWritingPaths {\n    readonly src: WritingPaths;\n    readonly public: WritingPaths;\n    readonly dist: WritingPaths;\n}\n\nexport function getWritingPaths(docId: string): AllWritingPaths {\n    const make = (root: string): WritingPaths => {\n        const parentDir = `${root}/data/writings`;\n        const dir = `${parentDir}/${docId}`;\n        return {\n            parentDir,\n            dir,\n            metadata: `${dir}/metadata.json`,\n            html: `${dir}/index.html`,\n        };\n    };\n    return {\n        get src() {\n            return make(\"src\");\n        },\n        get public() {\n            return make(\"public\");\n        },\n        get dist() {\n            return make(process.env.PUBLIC_URL!!);\n        },\n    };\n}\n","import {FC} from \"react\";\nimport {DietrichLab} from \"../internship/DietrichLab\";\nimport {FruitFlyBrainObservatory} from \"../internship/FruitFlyBrainObservatory\";\nimport {Baseball} from \"./Baseball\";\nimport {Home} from \"./Home\";\nimport {Internships} from \"./Internships\";\nimport {Projects} from \"./Projects\";\nimport {Resume} from \"./Resume\";\nimport {Writings} from \"./Writings\";\n\nconst mainPages = {\n    Home,\n    Internships,\n    Projects,\n    Writing: Writings,\n    Baseball,\n    Resume,\n} as const;\n\nconst subPages = {\n    ...FruitFlyBrainObservatory.pages,\n    ...DietrichLab.pages,\n} as const;\n\nexport const pages = {\n    main: mainPages,\n    sub: subPages,\n    all: {\n        ...mainPages,\n        ...subPages,\n    },\n} as const;\n\nexport type Pages = {readonly [name: string]: FC};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Home: FC = () => {\n    return <>\n        Home\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {DietrichLab} from \"../internship/DietrichLab\";\nimport {FruitFlyBrainObservatory} from \"../internship/FruitFlyBrainObservatory\";\nimport {SmartNeuralFuzzer} from \"../internship/SmartNeuralFuzzer\";\n\nexport const Internships: FC = () => {\n    return <>\n        Internships\n        <br/>\n        <SmartNeuralFuzzer/>\n        <br/>\n        <FruitFlyBrainObservatory.Preview/>\n        <br/>\n        <DietrichLab.Preview/>\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectHeader} from \"../project/ProjectHeader\";\nimport {projectsData} from \"../project/projectsData\";\n\nexport const Projects: FC = () => {\n    return <div>\n        {Object.values(projectsData)\n            .map(project => <ProjectHeader data={project} key={project.url}/>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {writings} from \"../writing/writings\";\n\nexport const Writings: FC = () => {\n    return <div>\n        {writings.map(({docId, title, date, url}) => <div key={docId}>\n            {title}\n            <br/>\n            {date.toLocaleDateString()}\n            <br/>\n            <a href={url}>Read it</a>\n            <br/>\n        </div>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Baseball: FC = () => {\n    return <>\n        Baseball\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Resume: FC = () => {\n    return <>\n        Resume\n    </>;\n};\n","import React, {FC} from \"react\";\nimport {me} from \"./me\";\n\nexport const Footer: FC = () => {\n    return <footer>\n        Email: {me.email}\n    </footer>;\n};\n","import React, {FC} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Pages} from \"../page/pages\";\n\nexport const NavBar: FC<{pages: Pages}> = ({pages}) => {\n    return <>\n        {Object.keys(pages)\n            .map(name =>\n                <Link to={`/${name}`} key={name}>\n                    <button>{name}</button>\n                </Link>)}\n    </>;\n};\n","import React, {FC} from \"react\";\nimport {pages} from \"../page/pages\";\nimport {me} from \"./me\";\nimport {NavBar} from \"./NavBar\";\n\nexport const Header: FC = () => {\n    return <header>\n        {me.name}\n        <NavBar pages={pages.main}/>\n    </header>;\n};\n","import React, {FC} from \"react\";\nimport {Route} from \"react-router\";\nimport {Pages} from \"../page/pages\";\nimport {Title} from \"./Title\";\n\nexport const Routes: FC<{pages: Pages}> = ({pages}) => {\n    return <>{\n        Object.entries(pages)\n            .map(([name, Page]) =>\n                <Route exact path={`/${name}`} component={() => <Title title={name}>\n                    <Page/>\n                </Title>} key={name}/>\n            )}\n    </>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// data are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst {location} = window;\n\nconst {\n    NODE_ENV: productionMode,\n    PUBLIC_URL: publicUrlString,\n} = process.env;\n\nconst {serviceWorker} = navigator;\n\nconst isLocalHost = (() => {\n    const {hostname} = location;\n    return !!(hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    );\n})();\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (productionMode === \"production\" && serviceWorker) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(publicUrlString, location.href);\n        if (publicUrl.origin !== location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        \n        window.addEventListener(\"load\", async () => {\n            const swUrl = `${publicUrlString}/service-worker.js`;\n            \n            if (isLocalHost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                await checkValidServiceWorker(swUrl, config);\n                \n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                await serviceWorker.ready;\n                console.log(\"This web app is being served cache-first by a service worker. \" +\n                    \"To learn more, visit https://bit.ly/CRA-PWA\");\n            } else {\n                // Is not localhost. Just register service worker\n                await registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nasync function registerValidSW(swUrl: string, config?: Config) {\n    try {\n        const registration = await serviceWorker.register(swUrl);\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker === null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === \"installed\") {\n                    if (serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            \"New content is available and will be used when all tabs for this page are closed. \" +\n                            \"See https://bit.ly/CRA-PWA.\");\n                        \n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log(\"Content is cached for offline use.\");\n                        \n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    } catch (e) {\n        console.error(\"Error during service worker registration:\", e);\n    }\n}\n\nexport async function unRegister() {\n    if (serviceWorker) {\n        const registration = await serviceWorker.ready;\n        await registration.unregister();\n    }\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    try {\n        const response = await fetch(swUrl);\n        const contentType = response.headers.get(\"content-type\");\n        if (response.status === 404 ||\n            (contentType !== null && !contentType.includes(\"javascript\"))) {\n            // No service worker found. Probably a different app. Reload the page.\n            await unRegister();\n            location.reload();\n        } else {\n            // Service worker found. Proceed as normal.\n            await registerValidSW(swUrl, config);\n        }\n    } catch {\n        console.log(\"No internet connection found. App is running in offline mode.\");\n        return;\n    }\n}\n","import {polyfill} from \"./ts/main/polyfill/polyfills\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport {App} from \"./ts/main/app/App\";\nimport * as serviceWorker from \"./ts/util/serviceWorker\";\n\npolyfill();\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unRegister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n(async () => {\n    await serviceWorker.unRegister();\n})();\n","import React, {FC} from \"react\";\nimport {HashRouter, Redirect, Route} from \"react-router-dom\";\nimport \"../../../css/App.css\";\nimport logo from \"../../../media/logo.svg\";\nimport {pages} from \"../page/pages\";\nimport {Footer} from \"./Footer\";\nimport {Header} from \"./Header\";\nimport {Routes} from \"./Routes\";\nimport {Title} from \"./Title\";\n\nexport const OldApp: FC = () => {\n    return <div>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    </div>;\n};\n\nexport const App: FC = () => {\n    return <Title>\n        <HashRouter>\n            <Header/>\n            <Route exact path=\"/\" component={() => <Redirect to=\"/Home\"/>}/>\n            <Routes pages={pages.all}/>\n            <Footer/>\n        </HashRouter>\n    </Title>;\n};\n"],"sourceRoot":""}