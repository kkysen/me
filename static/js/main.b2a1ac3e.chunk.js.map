{"version":3,"sources":["media/logo.svg","ts/main/project/ProjectHeader.tsx","ts/main/project/ProjectData.ts","ts/main/project/projectsData.ts","ts/main/writing/writings.ts","ts/main/writing/WritingPaths.ts","ts/main/page/Writings.tsx","ts/main/App.tsx","ts/main/page/Home.tsx","ts/main/page/Internships.tsx","ts/main/page/Projects.tsx","ts/main/page/Baseball.tsx","ts/main/page/Resume.tsx","ts/util/serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ProjectHeader","_ref","data","name","brief","url","react","href","separateCamelCase","className","replace","trim","json","projectsData","projectsJson","Object","fromEntries","entries","flatMap","_ref2","slicedToArray","gitHubUser","repos","map","_ref3","_ref4","repoName","project","_json$camelCase","camelCase","file","s","concat","parseProject","WritingImpl","docId","title","date","classCallCheck","this","make","root","parentDir","dir","metadata","html","src","public","dist","process","getWritingPaths","writings","writingsMetadata","_ref2$override","override","Date","forEach","writing","console","log","pages","Home","Internships","Projects","values","ProjectHeader_ProjectHeader","key","Writings","toLocaleDateString","Baseball","Resume","Routes","react_default","a","createElement","Fragment","page","react_router","exact","path","component","NavBar","keys","react_router_dom","to","Header","App_NavBar","Footer","location","window","serviceWorker","NODE_ENV","PUBLIC_URL","navigator","hostname","match","unRegister","_unRegister","apply","arguments","_callee3","_registration2","regenerator_default","wrap","_context3","prev","next","ready","registration","sent","unregister","stop","ReactDOM","App_Header","App_Routes","App_Footer","document","getElementById","asyncToGenerator","mark","_callee","_context"],"mappings":"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","file":"static/js/main.b2a1ac3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectData} from \"./ProjectData\";\n\nexport const ProjectHeader: FC<{data: ProjectData}> = ({data}) => {\n    const {name, brief, url} = data;\n    return <div>\n        Name: {name}\n        <br/>\n        {brief}\n        <br/>\n        See source code: <a href={url}>{url}</a>\n        <br/>\n    </div>;\n};\n","interface ProjectJson {\n    readonly brief: string;\n    readonly name?: string;\n    readonly camelCase?: boolean;\n    readonly file?: string;\n}\n\ninterface ProjectsJson {\n    readonly [gitHubUser: string]: {\n        readonly [repoName: string]: ProjectJson;\n    };\n}\n\nexport interface ProjectData {\n    readonly name: string;\n    readonly gitHubUser: string;\n    readonly repoName: string;\n    readonly url: string;\n    readonly brief: string;\n}\n\nfunction separateCamelCase(className: string): string {\n    return className.replace(/([A-Z])/g, \" $1\").trim();\n}\n\nfunction parseProject(gitHubUser: string, repoName: string, json: ProjectJson): ProjectData {\n    const {brief, name, camelCase = true, file} = json;\n    return {\n        name: name || (camelCase ? separateCamelCase : (s: string) => s)(repoName),\n        gitHubUser,\n        repoName,\n        url: `https://github.com/${gitHubUser}/${repoName}${file || \"\"}`,\n        brief,\n    };\n}\n\nexport function parseProjects(json: ProjectsJson): {[repoName: string]: ProjectData} {\n    return Object.fromEntries(\n        Object.entries(json)\n            .flatMap(([gitHubUser, repos]) => Object.entries(repos)\n                .map(([repoName, project]) => parseProject(gitHubUser, repoName, project))\n            )\n            .map(project => [project.repoName, project])\n    );\n}\n","import projectsJson from \"../../../data/projects/projects.json\";\nimport {parseProjects} from \"./ProjectData\";\n\nexport const projectsData = parseProjects(projectsJson);\n","import writingsMetadata from \"../../../data/writings/metadata.json\";\nimport {JsonWritingMetadata, JsonWritingMetadataOverride, WritingData, WritingMetadata} from \"./WritingData\";\nimport {getWritingPaths} from \"./WritingPaths\";\n\nclass WritingImpl implements WritingData {\n    \n    readonly docId: string;\n    readonly title: string;\n    readonly date: Date;\n    \n    constructor({docId, title, date}: WritingMetadata) {\n        this.docId = docId;\n        this.title = title;\n        this.date = date;\n    }\n    \n    get url() {\n        return getWritingPaths(this.docId).dist.html;\n    }\n    \n}\n\ninterface OverrideableJsonWritingMetadata extends JsonWritingMetadata {\n    override?: JsonWritingMetadataOverride;\n}\n\nexport function writingFromJson({docId, title, date, override = {}}: OverrideableJsonWritingMetadata): WritingData {\n    return new WritingImpl({\n        docId,\n        title: override.title || title,\n        date: new Date(override.date || date),\n    });\n}\n\nexport const writings: readonly WritingData[] = writingsMetadata.map(writingFromJson);\n\nwritings.forEach(writing => {\n    console.log(`${writing.title}: ${writing.url}`);\n});\n","interface WritingPaths {\n    readonly parentDir: string;\n    readonly dir: string;\n    readonly metadata: string;\n    readonly html: string;\n}\n\ninterface AllWritingPaths {\n    readonly src: WritingPaths;\n    readonly public: WritingPaths;\n    readonly dist: WritingPaths;\n}\n\nexport function getWritingPaths(docId: string): AllWritingPaths {\n    const make = (root: string): WritingPaths => {\n        const parentDir = `${root}/data/writings`;\n        const dir = `${parentDir}/${docId}`;\n        return {\n            parentDir,\n            dir,\n            metadata: `${dir}/metadata.json`,\n            html: `${dir}/index.html`,\n        };\n    };\n    return {\n        get src() {\n            return make(\"src\");\n        },\n        get public() {\n            return make(\"public\");\n        },\n        get dist() {\n            return make(process.env.PUBLIC_URL!!);\n        },\n    };\n}\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {writings} from \"../writing/writings\";\n\nexport const Writings: FC = () => {\n    return <div>\n        {writings.map(({docId, title, date, url}) => <div key={docId}>\n            {title}\n            <br/>\n            {date.toLocaleDateString()}\n            <br/>\n            <a href={url}>Read it</a>\n            <br/>\n        </div>)}\n    </div>;\n};\n","import React, {FC} from \"react\";\nimport {HashRouter, Link, Redirect, Route} from \"react-router-dom\";\nimport \"../../css/App.css\";\nimport logo from \"../../media/logo.svg\";\nimport {Baseball} from \"./page/Baseball\";\nimport {Home} from \"./page/Home\";\nimport {Internships} from \"./page/Internships\";\nimport {Projects} from \"./page/Projects\";\nimport {Resume} from \"./page/Resume\";\nimport {Writings} from \"./page/Writings\";\n\nexport const OldApp: FC = () => {\n    return <div>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    </div>;\n};\n\nconst pages = {\n    Home,\n    Internships,\n    Projects,\n    Writings,\n    Baseball,\n    Resume,\n};\n\ntype Pages = {[name: string]: FC};\n\nconst Routes: FC<{pages: Pages}> = ({pages}) => {\n    return <>{\n        Object.entries(pages)\n            .map(([name, page]) => <Route exact path={`/${name}`} component={page} key={name}/>)}\n    </>;\n};\n\nconst NavBar: FC<{pages: Pages}> = () => {\n    return <>\n        {Object.keys(pages)\n            .map(name => <Link to={`/${name}`} key={name}><button>{name}</button></Link>)}\n    </>;\n};\n\nconst Header: FC = () => {\n    return <header>\n        Khyber Sen\n        <NavBar pages={pages}/>\n    </header>;\n};\n\nconst Footer: FC = () => {\n    return <footer>\n        Email: kkysen@gmail.com\n    </footer>;\n};\n\nexport const App: FC = () => {\n    return <HashRouter>\n        <Header/>\n        <Route exact path=\"/\" component={() => <Redirect to=\"/Home\"/>}/>\n        <Routes pages={pages}/>\n        <Footer/>\n    </HashRouter>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Home: FC = () => {\n    return <>\n        Home\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Internships: FC = () => {\n    return <>\n        Internships\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectHeader} from \"../project/ProjectHeader\";\nimport {projectsData} from \"../project/projectsData\";\n\nexport const Projects: FC = () => {\n    return <div>\n        {Object.values(projectsData)\n            .map(project => <ProjectHeader data={project} key={project.url}/>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Baseball: FC = () => {\n    return <>\n        Baseball\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Resume: FC = () => {\n    return <>\n        Resume\n    </>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// data are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst {location} = window;\n\nconst {\n    NODE_ENV: productionMode,\n    PUBLIC_URL: publicUrlString,\n} = process.env;\n\nconst {serviceWorker} = navigator;\n\nconst isLocalHost = (() => {\n    const {hostname} = location;\n    return !!(hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    );\n})();\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (productionMode === \"production\" && serviceWorker) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(publicUrlString, location.href);\n        if (publicUrl.origin !== location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        \n        window.addEventListener(\"load\", async () => {\n            const swUrl = `${publicUrlString}/service-worker.js`;\n            \n            if (isLocalHost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                await checkValidServiceWorker(swUrl, config);\n                \n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                await serviceWorker.ready;\n                console.log(\"This web app is being served cache-first by a service worker. \" +\n                    \"To learn more, visit https://bit.ly/CRA-PWA\");\n            } else {\n                // Is not localhost. Just register service worker\n                await registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nasync function registerValidSW(swUrl: string, config?: Config) {\n    try {\n        const registration = await serviceWorker.register(swUrl);\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker === null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === \"installed\") {\n                    if (serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            \"New content is available and will be used when all tabs for this page are closed. \" +\n                            \"See https://bit.ly/CRA-PWA.\");\n                        \n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log(\"Content is cached for offline use.\");\n                        \n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    } catch (e) {\n        console.error(\"Error during service worker registration:\", e);\n    }\n}\n\nexport async function unRegister() {\n    if (serviceWorker) {\n        const registration = await serviceWorker.ready;\n        await registration.unregister();\n    }\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    try {\n        const response = await fetch(swUrl);\n        const contentType = response.headers.get(\"content-type\");\n        if (response.status === 404 ||\n            (contentType !== null && !contentType.includes(\"javascript\"))) {\n            // No service worker found. Probably a different app. Reload the page.\n            await unRegister();\n            location.reload();\n        } else {\n            // Service worker found. Proceed as normal.\n            await registerValidSW(swUrl, config);\n        }\n    } catch {\n        console.log(\"No internet connection found. App is running in offline mode.\");\n        return;\n    }\n}\n","import \"react-app-polyfill/stable\";\nimport \"core-js/features/array/flat-map\";\nimport \"core-js/features/object/from-entries.js\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport {App} from \"./ts/main/App\";\nimport * as serviceWorker from \"./ts/util/serviceWorker\";\n\n// polyfill();\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unRegister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n(async () => {\n    await serviceWorker.unRegister();\n})();\n"],"sourceRoot":""}