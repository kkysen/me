{"version":3,"sources":["media/logo.svg","ts/main/polyfill/Array.prototype.flatMap.ts","ts/main/polyfill/Object.fromEntries.ts","ts/main/project/ProjectHeader.tsx","ts/main/project/ProjectData.ts","ts/main/project/projectsData.ts","ts/main/writing/writings.ts","ts/main/writing/WritingPaths.ts","ts/main/App.tsx","ts/main/page/Home.tsx","ts/main/page/Internships.tsx","ts/main/page/Projects.tsx","ts/main/page/Writings.tsx","ts/main/page/Baseball.tsx","ts/main/page/Resume.tsx","ts/util/serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Array","prototype","flatMap","thisArg","_ref","bind","concat","apply","Object","toConsumableArray","this","map","fromEntries","entries","o","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","k","v","err","return","ProjectHeader","data","name","brief","url","react","href","separateCamelCase","className","replace","trim","json","projectsData","projectsJson","gitHubUser","repos","_ref4","repoName","project","_json$camelCase","camelCase","file","s","parseProject","WritingImpl","docId","title","date","classCallCheck","make","root","parentDir","dir","metadata","html","src","public","dist","process","getWritingPaths","writings","writingsMetadata","_ref2$override","override","Date","pages","Home","Internships","Projects","values","ProjectHeader_ProjectHeader","key","Writings","toLocaleDateString","Baseball","Resume","Routes","react_default","a","createElement","Fragment","page","react_router","exact","path","component","NavBar","keys","react_router_dom","to","Header","App_NavBar","Footer","location","window","serviceWorker","NODE_ENV","PUBLIC_URL","navigator","hostname","match","unRegister","_unRegister","arguments","_callee3","_registration2","regenerator_default","wrap","_context3","prev","ready","registration","sent","unregister","stop","ReactDOM","App_Header","App_Routes","App_Footer","document","getElementById","asyncToGenerator","mark","_callee","_context"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,s8RCYnCC,MAAMC,UAAUC,UACjBF,MAAMC,UAAUC,QAbb,SAEHA,EACAC,GACG,IAAAC,EAKH,OAJID,IACAD,EAAUA,EAAQG,KAAKF,KAGpBC,EAAC,IAAWE,OAAZC,MAAAH,EAAAI,OAAAC,EAAA,EAAAD,CAAsBE,KAAKC,IAAIT,kBCCrCM,OAAOI,cACRJ,OAAOI,YAXJ,SAA8BC,GACjC,IAAMC,EAA+B,GADqEC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE1G,QAAAC,EAAAC,EAAqBP,EAArBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA8B,KAAAU,EAAAN,EAAAO,MAAAC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAAlBI,EAAkBF,EAAA,GAAfG,EAAeH,EAAA,GAG1Bb,EAAEe,GAAwBC,GAL4E,MAAAC,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,GAO1G,OAAOH,uDCHEmB,eAAyC,SAAA7B,GAAY,IAAV8B,EAAU9B,EAAV8B,KAC7CC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,IACpB,OAAOC,EAAA,kCACIH,EACPG,EAAA,yBACCF,EACDE,EAAA,yBAJG,oBAKcA,EAAA,mBAAGC,KAAMF,GAAMA,GAChCC,EAAA,oCCSR,SAASE,EAAkBC,GACvB,OAAOA,EAAUC,QAAQ,WAAY,OAAOC,OCnBzC,IDiCuBC,ECjCjBC,GDiCiBD,ECjCYE,EDkC/BtC,OAAOI,YACVJ,OAAOK,QAAQ+B,GACV1C,QAAQ,SAAAE,GAAA,IAAAuB,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAJ,EAAA,GAAE2C,EAAFpB,EAAA,GAAcqB,EAAdrB,EAAA,UAAyBnB,OAAOK,QAAQmC,GAC5CrC,IAAI,SAAAc,GAAA,IAAAwB,EAAAzC,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAAEyB,EAAFD,EAAA,GAAYE,EAAZF,EAAA,UAfrB,SAAsBF,EAAoBG,EAAkBN,GAAgC,IACjFR,EAAuCQ,EAAvCR,MAAOD,EAAgCS,EAAhCT,KAD0EiB,EAC1CR,EAA1BS,iBADoE,IAAAD,KAClDE,EAAQV,EAARU,KACtC,MAAO,CACHnB,KAAMA,IAASkB,EAAYb,EAAoB,SAACe,GAAD,OAAeA,IAAGL,GACjEH,aACAG,WACAb,IAAG,sBAAA/B,OAAwByC,EAAxB,KAAAzC,OAAsC4C,GAAtC5C,OAAiDgD,GAAQ,IAC5DlB,SAQsCoB,CAAaT,EAAYG,EAAUC,OAEpExC,IAAI,SAAAwC,GAAO,MAAI,CAACA,EAAQD,SAAUC,mCEtCzCM,aAMF,SAAAA,EAAArD,GAAmD,IAAtCsD,EAAsCtD,EAAtCsD,MAAOC,EAA+BvD,EAA/BuD,MAAOC,EAAwBxD,EAAxBwD,KAAwBpD,OAAAqD,EAAA,EAAArD,CAAAE,KAAA+C,GAAA/C,KAJ1CgD,WAI0C,EAAAhD,KAH1CiD,WAG0C,EAAAjD,KAF1CkD,UAE0C,EAC/ClD,KAAKgD,MAAQA,EACbhD,KAAKiD,MAAQA,EACbjD,KAAKkD,KAAOA,kDAIZ,OCJD,SAAyBF,GAC5B,IAAMI,EAAO,SAACC,GACV,IAAMC,EAAS,GAAA1D,OAAMyD,EAAN,kBACTE,EAAG,GAAA3D,OAAM0D,EAAN,KAAA1D,OAAmBoD,GAC5B,MAAO,CACHM,YACAC,MACAC,SAAQ,GAAA5D,OAAK2D,EAAL,kBACRE,KAAI,GAAA7D,OAAK2D,EAAL,iBAGZ,MAAO,CACHG,UACI,OAAON,EAAK,QAEhBO,aACI,OAAOP,EAAK,WAEhBQ,WACI,OAAOR,EAAKS,SDfTC,CAAgB9D,KAAKgD,OAAOY,KAAKH,cAiBzC,IAAMM,EAAmCC,EAAiB/D,IAR1D,SAAAgB,GAA4G,IAAlF+B,EAAkF/B,EAAlF+B,MAAOC,EAA2EhC,EAA3EgC,MAAOC,EAAoEjC,EAApEiC,KAAoEe,EAAAhD,EAA9DiD,gBAA8D,IAAAD,EAAnD,GAAmDA,EAC/G,OAAO,IAAIlB,EAAY,CACnBC,QACAC,MAAOiB,EAASjB,OAASA,EACzBC,KAAM,IAAIiB,KAAKD,EAAShB,MAAQA,OEElCkB,EAAQ,CACVC,KC9BoB,WACpB,OAAOzC,EAAA,cAAAA,EAAA,uBD8BP0C,YE/B2B,WAC3B,OAAO1C,EAAA,cAAAA,EAAA,8BF+BP2C,SG9BwB,WACxB,OAAO3C,EAAA,yBACF9B,OAAO0E,OAAOrC,GACVlC,IAAI,SAAAwC,GAAO,OAAIb,EAAA,cAAC6C,EAAD,CAAejD,KAAMiB,EAASiC,IAAKjC,EAAQd,UH4BnEgD,SIhCwB,WACxB,OAAO/C,EAAA,yBACFmC,EAAS9D,IAAI,SAAAP,GAAA,IAAEsD,EAAFtD,EAAEsD,MAAOC,EAATvD,EAASuD,MAAOC,EAAhBxD,EAAgBwD,KAAMvB,EAAtBjC,EAAsBiC,IAAtB,OAA+BC,EAAA,qBAAK8C,IAAK1B,GAClDC,EACDrB,EAAA,yBACCsB,EAAK0B,qBACNhD,EAAA,yBACAA,EAAA,mBAAGC,KAAMF,GAAT,WACAC,EAAA,8BJyBRiD,SKlCwB,WACxB,OAAOjD,EAAA,cAAAA,EAAA,2BLkCPkD,OMnCsB,WACtB,OAAOlD,EAAA,cAAAA,EAAA,0BNuCLmD,EAA6B,SAAArF,GAAa,IAAX0E,EAAW1E,EAAX0E,MACjC,OAAOY,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACHrF,OAAOK,QAAQiE,GACVnE,IAAI,SAAAgB,GAAA,IAAAF,EAAAjB,OAAAoB,EAAA,EAAApB,CAAAmB,EAAA,GAAEQ,EAAFV,EAAA,GAAQqE,EAARrE,EAAA,UAAkBiE,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,IAAA3F,OAAM6B,GAAQ+D,UAAWJ,EAAMV,IAAKjD,QAIlFgE,EAA6B,WAC/B,OAAOT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACFrF,OAAO4F,KAAKtB,GACRnE,IAAI,SAAAwB,GAAI,OAAIuD,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAMC,GAAE,IAAAhG,OAAM6B,GAAQiD,IAAKjD,GAAMuD,EAAAC,EAAAC,cAAA,cAASzD,QAI7DoE,EAAa,WACf,OAAOb,EAAAC,EAAAC,cAAA,2BAEHF,EAAAC,EAAAC,cAACY,EAAD,CAAQ1B,MAAOA,MAIjB2B,EAAa,WACf,OAAOf,EAAAC,EAAAC,cAAA,0COrDJc,EAAYC,OAAZD,WAKHnC,iDAEGqC,KAJHC,WACAC,WAGoBC,UAAjBH,gBAEc,WAAM,IAChBI,EAAYN,EAAZM,SACgB,cAAbA,GAEO,UAAbA,GAEAA,EAASC,MAAM,0DANF,GAuFd,SAAeC,IAAtB,OAAAC,EAAA5G,MAAAG,KAAA0G,sDAAO,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAlG,MAAA,WACCqF,EADD,CAAAa,EAAAlG,KAAA,eAAAkG,EAAAlG,KAAA,EAE4BqF,EAAce,MAF1C,cAEOC,EAFPH,EAAAI,KAAAJ,EAAAlG,KAAA,EAGOqG,EAAaE,aAHpB,wBAAAL,EAAAM,SAAAV,6BCnGPW,SAAgB1F,EAAA,cR6DO,WACnB,OAAOoD,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACHX,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAMR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUO,GAAG,aACpDZ,EAAAC,EAAAC,cAACsC,EAAD,CAAQpD,MAAOA,IACfY,EAAAC,EAAAC,cAACuC,EAAD,QQlEQ,MAAQC,SAASC,eAAe,SAKhD7H,OAAA8H,EAAA,EAAA9H,CAAA+G,EAAA5B,EAAA4C,KAAC,SAAAC,IAAA,OAAAjB,EAAA5B,EAAA6B,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAlH,MAAA,cAAAkH,EAAAlH,KAAA,EACSqF,IADT,wBAAA6B,EAAAV,SAAAS,KAADhI","file":"static/js/main.ff35117f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function flatMap<T, U, This = undefined>(\n    this: T[],\n    flatMap: (this: This, value: T, index: number, array: T[]) => U | readonly U[],\n    thisArg?: This\n): U[] {\n    if (thisArg) {\n        flatMap = flatMap.bind(thisArg as ThisParameterType<typeof flatMap>);\n    }\n    // TODO speed up, remove unnecessary copies w/ manual for...of loop\n    return ([] as U[]).concat(...this.map(flatMap));\n}\n\nif (!Array.prototype.flatMap) {\n    Array.prototype.flatMap = flatMap;\n}\n","export function fromEntries<T = any>(entries: Iterable<readonly [PropertyKey, T]>): { [k in PropertyKey]: T } {\n    const o: { [k in PropertyKey]: T } = {};\n    for (const [k, v] of entries) {\n        // for some reason symbols aren't allowed as an indexable property\n        // even though they're part of PropertyKey\n        o[k as string | number] = v;\n    }\n    return o;\n}\n\nif (!Object.fromEntries) {\n    Object.fromEntries = fromEntries;\n}\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectData} from \"./ProjectData\";\n\nexport const ProjectHeader: FC<{data: ProjectData}> = ({data}) => {\n    const {name, brief, url} = data;\n    return <div>\n        Name: {name}\n        <br/>\n        {brief}\n        <br/>\n        See source code: <a href={url}>{url}</a>\n        <br/>\n    </div>;\n};\n","interface ProjectJson {\n    readonly brief: string;\n    readonly name?: string;\n    readonly camelCase?: boolean;\n    readonly file?: string;\n}\n\ninterface ProjectsJson {\n    readonly [gitHubUser: string]: {\n        readonly [repoName: string]: ProjectJson;\n    };\n}\n\nexport interface ProjectData {\n    readonly name: string;\n    readonly gitHubUser: string;\n    readonly repoName: string;\n    readonly url: string;\n    readonly brief: string;\n}\n\nfunction separateCamelCase(className: string): string {\n    return className.replace(/([A-Z])/g, \" $1\").trim();\n}\n\nfunction parseProject(gitHubUser: string, repoName: string, json: ProjectJson): ProjectData {\n    const {brief, name, camelCase = true, file} = json;\n    return {\n        name: name || (camelCase ? separateCamelCase : (s: string) => s)(repoName),\n        gitHubUser,\n        repoName,\n        url: `https://github.com/${gitHubUser}/${repoName}${file || \"\"}`,\n        brief,\n    };\n}\n\nexport function parseProjects(json: ProjectsJson): {[repoName: string]: ProjectData} {\n    return Object.fromEntries(\n        Object.entries(json)\n            .flatMap(([gitHubUser, repos]) => Object.entries(repos)\n                .map(([repoName, project]) => parseProject(gitHubUser, repoName, project))\n            )\n            .map(project => [project.repoName, project])\n    );\n}\n","import projectsJson from \"../../../data/projects/projects.json\";\nimport {parseProjects} from \"./ProjectData\";\n\nexport const projectsData = parseProjects(projectsJson);\n","import writingsMetadata from \"../../../data/writings/metadata.json\";\nimport {JsonWritingMetadata, JsonWritingMetadataOverride, WritingData, WritingMetadata} from \"./WritingData\";\nimport {getWritingPaths} from \"./WritingPaths\";\n\nclass WritingImpl implements WritingData {\n    \n    readonly docId: string;\n    readonly title: string;\n    readonly date: Date;\n    \n    constructor({docId, title, date}: WritingMetadata) {\n        this.docId = docId;\n        this.title = title;\n        this.date = date;\n    }\n    \n    get url() {\n        return getWritingPaths(this.docId).dist.html;\n    }\n    \n}\n\ninterface OverrideableJsonWritingMetadata extends JsonWritingMetadata {\n    override?: JsonWritingMetadataOverride;\n}\n\nexport function writingFromJson({docId, title, date, override = {}}: OverrideableJsonWritingMetadata): WritingData {\n    return new WritingImpl({\n        docId,\n        title: override.title || title,\n        date: new Date(override.date || date),\n    });\n}\n\nexport const writings: readonly WritingData[] = writingsMetadata.map(writingFromJson);\n","interface WritingPaths {\n    readonly parentDir: string;\n    readonly dir: string;\n    readonly metadata: string;\n    readonly html: string;\n}\n\ninterface AllWritingPaths {\n    readonly src: WritingPaths;\n    readonly public: WritingPaths;\n    readonly dist: WritingPaths;\n}\n\nexport function getWritingPaths(docId: string): AllWritingPaths {\n    const make = (root: string): WritingPaths => {\n        const parentDir = `${root}/data/writings`;\n        const dir = `${parentDir}/${docId}`;\n        return {\n            parentDir,\n            dir,\n            metadata: `${dir}/metadata.json`,\n            html: `${dir}/index.html`,\n        };\n    };\n    return {\n        get src() {\n            return make(\"src\");\n        },\n        get public() {\n            return make(\"public\");\n        },\n        get dist() {\n            return make(process.env.PUBLIC_URL!!);\n        },\n    };\n}\n","import React, {FC} from \"react\";\nimport {HashRouter, Link, Redirect, Route} from \"react-router-dom\";\nimport \"../../css/App.css\";\nimport logo from \"../../media/logo.svg\";\nimport {Baseball} from \"./page/Baseball\";\nimport {Home} from \"./page/Home\";\nimport {Internships} from \"./page/Internships\";\nimport {Projects} from \"./page/Projects\";\nimport {Resume} from \"./page/Resume\";\nimport {Writings} from \"./page/Writings\";\n\nexport const OldApp: FC = () => {\n    return <div>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    </div>;\n};\n\nconst pages = {\n    Home,\n    Internships,\n    Projects,\n    Writings,\n    Baseball,\n    Resume,\n};\n\ntype Pages = {[name: string]: FC};\n\nconst Routes: FC<{pages: Pages}> = ({pages}) => {\n    return <>{\n        Object.entries(pages)\n            .map(([name, page]) => <Route exact path={`/${name}`} component={page} key={name}/>)}\n    </>;\n};\n\nconst NavBar: FC<{pages: Pages}> = () => {\n    return <>\n        {Object.keys(pages)\n            .map(name => <Link to={`/${name}`} key={name}><button>{name}</button></Link>)}\n    </>;\n};\n\nconst Header: FC = () => {\n    return <header>\n        Khyber Sen\n        <NavBar pages={pages}/>\n    </header>;\n};\n\nconst Footer: FC = () => {\n    return <footer>\n        Email: kkysen@gmail.com\n    </footer>;\n};\n\nexport const App: FC = () => {\n    return <HashRouter>\n        <Header/>\n        <Route exact path=\"/\" component={() => <Redirect to=\"/Home\"/>}/>\n        <Routes pages={pages}/>\n        <Footer/>\n    </HashRouter>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Home: FC = () => {\n    return <>\n        Home\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Internships: FC = () => {\n    return <>\n        Internships\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectHeader} from \"../project/ProjectHeader\";\nimport {projectsData} from \"../project/projectsData\";\n\nexport const Projects: FC = () => {\n    return <div>\n        {Object.values(projectsData)\n            .map(project => <ProjectHeader data={project} key={project.url}/>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {writings} from \"../writing/writings\";\n\nexport const Writings: FC = () => {\n    return <div>\n        {writings.map(({docId, title, date, url}) => <div key={docId}>\n            {title}\n            <br/>\n            {date.toLocaleDateString()}\n            <br/>\n            <a href={url}>Read it</a>\n            <br/>\n        </div>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Baseball: FC = () => {\n    return <>\n        Baseball\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Resume: FC = () => {\n    return <>\n        Resume\n    </>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// data are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst {location} = window;\n\nconst {\n    NODE_ENV: productionMode,\n    PUBLIC_URL: publicUrlString,\n} = process.env;\n\nconst {serviceWorker} = navigator;\n\nconst isLocalHost = (() => {\n    const {hostname} = location;\n    return !!(hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    );\n})();\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (productionMode === \"production\" && serviceWorker) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(publicUrlString, location.href);\n        if (publicUrl.origin !== location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        \n        window.addEventListener(\"load\", async () => {\n            const swUrl = `${publicUrlString}/service-worker.js`;\n            \n            if (isLocalHost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                await checkValidServiceWorker(swUrl, config);\n                \n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                await serviceWorker.ready;\n                console.log(\"This web app is being served cache-first by a service worker. \" +\n                    \"To learn more, visit https://bit.ly/CRA-PWA\");\n            } else {\n                // Is not localhost. Just register service worker\n                await registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nasync function registerValidSW(swUrl: string, config?: Config) {\n    try {\n        const registration = await serviceWorker.register(swUrl);\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker === null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === \"installed\") {\n                    if (serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            \"New content is available and will be used when all tabs for this page are closed. \" +\n                            \"See https://bit.ly/CRA-PWA.\");\n                        \n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log(\"Content is cached for offline use.\");\n                        \n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    } catch (e) {\n        console.error(\"Error during service worker registration:\", e);\n    }\n}\n\nexport async function unRegister() {\n    if (serviceWorker) {\n        const registration = await serviceWorker.ready;\n        await registration.unregister();\n    }\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    try {\n        const response = await fetch(swUrl);\n        const contentType = response.headers.get(\"content-type\");\n        if (response.status === 404 ||\n            (contentType !== null && !contentType.includes(\"javascript\"))) {\n            // No service worker found. Probably a different app. Reload the page.\n            await unRegister();\n            location.reload();\n        } else {\n            // Service worker found. Proceed as normal.\n            await registerValidSW(swUrl, config);\n        }\n    } catch {\n        console.log(\"No internet connection found. App is running in offline mode.\");\n        return;\n    }\n}\n","import {polyfill} from \"./ts/main/polyfill/polyfills\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport {App} from \"./ts/main/App\";\nimport * as serviceWorker from \"./ts/util/serviceWorker\";\n\npolyfill();\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unRegister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n(async () => {\n    await serviceWorker.unRegister();\n})();\n"],"sourceRoot":""}