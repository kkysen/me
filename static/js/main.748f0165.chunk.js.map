{"version":3,"sources":["media/logo.svg","ts/main/polyfill/Array.prototype.flatMap.ts","ts/main/polyfill/Object.fromEntries.ts","ts/main/app/me.ts","ts/main/app/Title.tsx","ts/main/internship/DietrichLabAbstractAndRole.tsx","ts/main/internship/DietrichLab.tsx","ts/main/internship/FruitFlyBrainObservatory.tsx","ts/main/internship/SmartNeuralFuzzer.tsx","ts/main/project/ProjectHeader.tsx","ts/main/project/ProjectData.ts","ts/main/project/projectsData.ts","ts/main/writing/writings.ts","ts/main/writing/WritingPaths.ts","ts/main/page/pages.tsx","ts/main/page/Home.tsx","ts/main/page/Internships.tsx","ts/main/page/Projects.tsx","ts/main/page/Writings.tsx","ts/main/page/Baseball.tsx","ts/main/page/Resume.tsx","ts/main/app/Footer.tsx","ts/main/app/NavBar.tsx","ts/main/app/Header.tsx","ts/main/app/Routes.tsx","ts/util/serviceWorker.ts","index.tsx","ts/main/app/App.tsx"],"names":["module","exports","__webpack_require__","p","Array","prototype","flatMap","thisArg","_ref","bind","concat","apply","Object","toConsumableArray","this","map","fromEntries","entries","o","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","k","v","err","return","me","Title","title","children","react","react_document_title_default","a","DietrichLabAbstractAndRole","Title_Title","DietrichLab","DietrichLabAbstractAndRole_DietrichLabAbstractAndRole","href","FruitFlyBrainObservatory","SmartNeuralFuzzer","ProjectHeader","data","name","brief","url","separateCamelCase","className","replace","trim","json","projectsData","projectsJson","gitHubUser","repos","_ref4","repoName","project","_json$camelCase","camelCase","file","s","parseProject","WritingImpl","docId","date","classCallCheck","make","root","parentDir","dir","metadata","html","src","public","dist","process","getWritingPaths","writings","writingsMetadata","_ref2$override","override","Date","pages","Home","Internships","SmartNeuralFuzzer_SmartNeuralFuzzer","FruitFlyBrainObservatory_FruitFlyBrainObservatory","DietrichLab_DietrichLab","Projects","values","ProjectHeader_ProjectHeader","key","Writings","toLocaleDateString","Baseball","Resume","Footer","react_default","createElement","NavBar","Fragment","keys","react_router_dom","to","Header","NavBar_NavBar","Routes","Page","react_router","exact","path","component","location","window","serviceWorker","NODE_ENV","PUBLIC_URL","navigator","hostname","match","unRegister","_unRegister","arguments","_callee3","_registration2","regenerator_default","wrap","_context3","prev","ready","registration","sent","unregister","stop","ReactDOM","Header_Header","Routes_Routes","Footer_Footer","document","getElementById","asyncToGenerator","mark","_callee","_context"],"mappings":"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","file":"static/js/main.748f0165.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function flatMap<T, U, This = undefined>(\n    this: T[],\n    flatMap: (this: This, value: T, index: number, array: T[]) => U | readonly U[],\n    thisArg?: This\n): U[] {\n    if (thisArg) {\n        flatMap = flatMap.bind(thisArg as ThisParameterType<typeof flatMap>);\n    }\n    // TODO speed up, remove unnecessary copies w/ manual for...of loop\n    return ([] as U[]).concat(...this.map(flatMap));\n}\n\nif (!Array.prototype.flatMap) {\n    Array.prototype.flatMap = flatMap;\n}\n","export function fromEntries<T = any>(entries: Iterable<readonly [PropertyKey, T]>): { [k in PropertyKey]: T } {\n    const o: { [k in PropertyKey]: T } = {};\n    for (const [k, v] of entries) {\n        // for some reason symbols aren't allowed as an indexable property\n        // even though they're part of PropertyKey\n        o[k as string | number] = v;\n    }\n    return o;\n}\n\nif (!Object.fromEntries) {\n    Object.fromEntries = fromEntries;\n}\n","export const me = {\n    name: \"Khyber Sen\",\n    email: \"kkysen@gmail.com\",\n} as const;\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport DocumentTitle from \"react-document-title\";\nimport {me} from \"./me\";\n\nexport const Title: FC<{title?: string}> = ({title, children}) => {\n    return <DocumentTitle title={title ? `${title} - ${me.name}` : me.name}>\n        <>\n            {children}\n        </>\n    </DocumentTitle>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {Title} from \"../app/Title\";\n\nexport const DietrichLabAbstractAndRole: FC = () => {\n    return <Title title=\"Dietrich Lab\">\n    \n    </Title>\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {DietrichLabAbstractAndRole} from \"./DietrichLabAbstractAndRole\";\n\nexport const DietrichLab: FC = () => {\n    return <>\n        Dietrich Lab\n        \n        {/*should be a link*/}\n        <DietrichLabAbstractAndRole/>\n        <br/>\n        <a href=\"http://www.dietrichlab.com/multicellularity.html\">Click here for project abstract.</a>\n        <br/>\n        <a href=\"http://www.dietrichlab.com/\">Click here for project website.</a>\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const FruitFlyBrainObservatory: FC = () => {\n    return <>\n        FFBO - Fruit Fly Brain Observatory\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const SmartNeuralFuzzer: FC = () => {\n    return <>\n        Smart Neural Fuzzer\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectData} from \"./ProjectData\";\n\nexport const ProjectHeader: FC<{data: ProjectData}> = ({data}) => {\n    const {name, brief, url} = data;\n    return <div>\n        Name: {name}\n        <br/>\n        {brief}\n        <br/>\n        See source code: <a href={url}>{url}</a>\n        <br/>\n    </div>;\n};\n","interface ProjectJson {\n    readonly brief: string;\n    readonly name?: string;\n    readonly camelCase?: boolean;\n    readonly file?: string;\n}\n\ninterface ProjectsJson {\n    readonly [gitHubUser: string]: {\n        readonly [repoName: string]: ProjectJson;\n    };\n}\n\nexport interface ProjectData {\n    readonly name: string;\n    readonly gitHubUser: string;\n    readonly repoName: string;\n    readonly url: string;\n    readonly brief: string;\n}\n\nfunction separateCamelCase(className: string): string {\n    return className.replace(/([A-Z])/g, \" $1\").trim();\n}\n\nfunction parseProject(gitHubUser: string, repoName: string, json: ProjectJson): ProjectData {\n    const {brief, name, camelCase = true, file} = json;\n    return {\n        name: name || (camelCase ? separateCamelCase : (s: string) => s)(repoName),\n        gitHubUser,\n        repoName,\n        url: `https://github.com/${gitHubUser}/${repoName}${file || \"\"}`,\n        brief,\n    };\n}\n\nexport function parseProjects(json: ProjectsJson): {[repoName: string]: ProjectData} {\n    return Object.fromEntries(\n        Object.entries(json)\n            .flatMap(([gitHubUser, repos]) => Object.entries(repos)\n                .map(([repoName, project]) => parseProject(gitHubUser, repoName, project))\n            )\n            .map(project => [project.repoName, project])\n    );\n}\n","import projectsJson from \"../../../data/projects/projects.json\";\nimport {parseProjects} from \"./ProjectData\";\n\nexport const projectsData = parseProjects(projectsJson);\n","import writingsMetadata from \"../../../data/writings/metadata.json\";\nimport {JsonWritingMetadata, JsonWritingMetadataOverride, WritingData, WritingMetadata} from \"./WritingData\";\nimport {getWritingPaths} from \"./WritingPaths\";\n\nclass WritingImpl implements WritingData {\n    \n    readonly docId: string;\n    readonly title: string;\n    readonly date: Date;\n    \n    constructor({docId, title, date}: WritingMetadata) {\n        this.docId = docId;\n        this.title = title;\n        this.date = date;\n    }\n    \n    get url() {\n        return getWritingPaths(this.docId).dist.html;\n    }\n    \n}\n\ninterface OverrideableJsonWritingMetadata extends JsonWritingMetadata {\n    override?: JsonWritingMetadataOverride;\n}\n\nexport function writingFromJson({docId, title, date, override = {}}: OverrideableJsonWritingMetadata): WritingData {\n    return new WritingImpl({\n        docId,\n        title: override.title || title,\n        date: new Date(override.date || date),\n    });\n}\n\nexport const writings: readonly WritingData[] = writingsMetadata.map(writingFromJson);\n","interface WritingPaths {\n    readonly parentDir: string;\n    readonly dir: string;\n    readonly metadata: string;\n    readonly html: string;\n}\n\ninterface AllWritingPaths {\n    readonly src: WritingPaths;\n    readonly public: WritingPaths;\n    readonly dist: WritingPaths;\n}\n\nexport function getWritingPaths(docId: string): AllWritingPaths {\n    const make = (root: string): WritingPaths => {\n        const parentDir = `${root}/data/writings`;\n        const dir = `${parentDir}/${docId}`;\n        return {\n            parentDir,\n            dir,\n            metadata: `${dir}/metadata.json`,\n            html: `${dir}/index.html`,\n        };\n    };\n    return {\n        get src() {\n            return make(\"src\");\n        },\n        get public() {\n            return make(\"public\");\n        },\n        get dist() {\n            return make(process.env.PUBLIC_URL!!);\n        },\n    };\n}\n","import {FC} from \"react\";\nimport {Baseball} from \"./Baseball\";\nimport {Home} from \"./Home\";\nimport {Internships} from \"./Internships\";\nimport {Projects} from \"./Projects\";\nimport {Resume} from \"./Resume\";\nimport {Writings} from \"./Writings\";\n\nexport const pages = {\n    Home,\n    Internships,\n    Projects,\n    Writings,\n    Baseball,\n    Resume,\n};\n\nexport type Pages = {[name: string]: FC};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Home: FC = () => {\n    return <>\n        Home\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {DietrichLab} from \"../internship/DietrichLab\";\nimport {FruitFlyBrainObservatory} from \"../internship/FruitFlyBrainObservatory\";\nimport {SmartNeuralFuzzer} from \"../internship/SmartNeuralFuzzer\";\n\nexport const Internships: FC = () => {\n    return <>\n        Internships\n        <br/>\n        <SmartNeuralFuzzer/>\n        <br/>\n        <FruitFlyBrainObservatory/>\n        <br/>\n        <DietrichLab/>\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {ProjectHeader} from \"../project/ProjectHeader\";\nimport {projectsData} from \"../project/projectsData\";\n\nexport const Projects: FC = () => {\n    return <div>\n        {Object.values(projectsData)\n            .map(project => <ProjectHeader data={project} key={project.url}/>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\nimport {writings} from \"../writing/writings\";\n\nexport const Writings: FC = () => {\n    return <div>\n        {writings.map(({docId, title, date, url}) => <div key={docId}>\n            {title}\n            <br/>\n            {date.toLocaleDateString()}\n            <br/>\n            <a href={url}>Read it</a>\n            <br/>\n        </div>)}\n    </div>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Baseball: FC = () => {\n    return <>\n        Baseball\n    </>;\n};\n","import * as React from \"react\";\nimport {FC} from \"react\";\n\nexport const Resume: FC = () => {\n    return <>\n        Resume\n    </>;\n};\n","import React, {FC} from \"react\";\nimport {me} from \"./me\";\n\nexport const Footer: FC = () => {\n    return <footer>\n        Email: {me.email}\n    </footer>;\n};\n","import React, {FC} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {pages, Pages} from \"../page/pages\";\n\nexport const NavBar: FC<{pages: Pages}> = () => {\n    return <>\n        {Object.keys(pages)\n            .map(name => <Link to={`/${name}`} key={name}>\n                <button>{name}</button>\n            </Link>)}\n    </>;\n};\n","import React, {FC} from \"react\";\nimport {pages} from \"../page/pages\";\nimport {NavBar} from \"./NavBar\";\n\nexport const Header: FC = () => {\n    return <header>\n        Khyber Sen\n        <NavBar pages={pages}/>\n    </header>;\n};\n","import React, {FC} from \"react\";\nimport {Route} from \"react-router\";\nimport {Pages} from \"../page/pages\";\nimport {Title} from \"./Title\";\n\nexport const Routes: FC<{pages: Pages}> = ({pages}) => {\n    return <>{\n        Object.entries(pages)\n            .map(([name, Page]) =>\n                <Route exact path={`/${name}`} component={() => <Title title={name}>\n                    <Page/>\n                </Title>} key={name}/>\n            )}\n    </>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// data are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst {location} = window;\n\nconst {\n    NODE_ENV: productionMode,\n    PUBLIC_URL: publicUrlString,\n} = process.env;\n\nconst {serviceWorker} = navigator;\n\nconst isLocalHost = (() => {\n    const {hostname} = location;\n    return !!(hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n    );\n})();\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (productionMode === \"production\" && serviceWorker) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(publicUrlString, location.href);\n        if (publicUrl.origin !== location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        \n        window.addEventListener(\"load\", async () => {\n            const swUrl = `${publicUrlString}/service-worker.js`;\n            \n            if (isLocalHost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                await checkValidServiceWorker(swUrl, config);\n                \n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                await serviceWorker.ready;\n                console.log(\"This web app is being served cache-first by a service worker. \" +\n                    \"To learn more, visit https://bit.ly/CRA-PWA\");\n            } else {\n                // Is not localhost. Just register service worker\n                await registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nasync function registerValidSW(swUrl: string, config?: Config) {\n    try {\n        const registration = await serviceWorker.register(swUrl);\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker === null) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === \"installed\") {\n                    if (serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            \"New content is available and will be used when all tabs for this page are closed. \" +\n                            \"See https://bit.ly/CRA-PWA.\");\n                        \n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log(\"Content is cached for offline use.\");\n                        \n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    } catch (e) {\n        console.error(\"Error during service worker registration:\", e);\n    }\n}\n\nexport async function unRegister() {\n    if (serviceWorker) {\n        const registration = await serviceWorker.ready;\n        await registration.unregister();\n    }\n}\n\nasync function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    try {\n        const response = await fetch(swUrl);\n        const contentType = response.headers.get(\"content-type\");\n        if (response.status === 404 ||\n            (contentType !== null && !contentType.includes(\"javascript\"))) {\n            // No service worker found. Probably a different app. Reload the page.\n            await unRegister();\n            location.reload();\n        } else {\n            // Service worker found. Proceed as normal.\n            await registerValidSW(swUrl, config);\n        }\n    } catch {\n        console.log(\"No internet connection found. App is running in offline mode.\");\n        return;\n    }\n}\n","import {polyfill} from \"./ts/main/polyfill/polyfills\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport {App} from \"./ts/main/app/App\";\nimport * as serviceWorker from \"./ts/util/serviceWorker\";\n\npolyfill();\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unRegister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n(async () => {\n    await serviceWorker.unRegister();\n})();\n","import React, {FC} from \"react\";\nimport {HashRouter, Redirect, Route} from \"react-router-dom\";\nimport \"../../../css/App.css\";\nimport logo from \"../../../media/logo.svg\";\nimport {pages} from \"../page/pages\";\nimport {Footer} from \"./Footer\";\nimport {Header} from \"./Header\";\nimport {Routes} from \"./Routes\";\nimport {Title} from \"./Title\";\n\nexport const OldApp: FC = () => {\n    return <div>\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.tsx</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    </div>;\n};\n\nexport const App: FC = () => {\n    return <Title>\n        <HashRouter>\n            <Header/>\n            <Route exact path=\"/\" component={() => <Redirect to=\"/Home\"/>}/>\n            <Routes pages={pages}/>\n            <Footer/>\n        </HashRouter>\n    </Title>;\n};\n"],"sourceRoot":""}